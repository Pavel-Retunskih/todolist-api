// MongoDB Initialization Script
// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ MongoDB –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

print('============================================');
print('üöÄ Initializing TodoList API Database');
print('============================================');

// –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö todolist-api
db = db.getSiblingDB('todolist-api');

// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
// db.createUser({
//   user: 'todolist-user',
//   pwd: 'todolist-password',
//   roles: [
//     {
//       role: 'readWrite',
//       db: 'todolist-api'
//     }
//   ]
// });

// –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏

// Users –∫–æ–ª–ª–µ–∫—Ü–∏—è
print('üìù Creating users collection...');
db.createCollection('users');

// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ email
db.users.createIndex(
  { email: 1 }, 
  { 
    unique: true,
    name: 'unique_email_index'
  }
);

print('‚úÖ Users collection created with unique email index');

// TodoLists –∫–æ–ª–ª–µ–∫—Ü–∏—è (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è)
print('üìã Creating todolists collection...');
db.createCollection('todolists');

// –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
db.todolists.createIndex(
  { ownerId: 1, createdAt: -1 },
  { name: 'owner_created_index' }
);

print('‚úÖ TodoLists collection created with owner index');

// Tasks –∫–æ–ª–ª–µ–∫—Ü–∏—è (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è)
print('üìå Creating tasks collection...');
db.createCollection('tasks');

// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è tasks
db.tasks.createIndex(
  { listId: 1, order: 1 },
  { name: 'list_order_index' }
);

db.tasks.createIndex(
  { listId: 1, status: 1, order: 1 },
  { name: 'list_status_order_index' }
);

print('‚úÖ Tasks collection created with order indexes');

// Refresh tokens –∫–æ–ª–ª–µ–∫—Ü–∏—è (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è)
print('üîê Creating refresh_tokens collection...');
db.createCollection('refresh_tokens');

// TTL –∏–Ω–¥–µ–∫—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
db.refresh_tokens.createIndex(
  { expiresAt: 1 },
  { 
    expireAfterSeconds: 0,
    name: 'ttl_refresh_tokens'
  }
);

// –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
db.refresh_tokens.createIndex(
  { userId: 1 },
  { name: 'user_tokens_index' }
);

print('‚úÖ Refresh tokens collection created with TTL index');

// –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –≤ development)
if (db.adminCommand('ismaster').ismaster) {
  print('üß™ Inserting sample data for development...');
  
  // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–∞—Ä–æ–ª—å: password123)
  const testUserId = new ObjectId();
  db.users.insertOne({
    _id: testUserId,
    email: 'test@example.com',
    passwordHash: '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewgTAL/GyPg8b8DW', // password123
    createdAt: new Date(),
    updatedAt: new Date()
  });
  
  print('‚úÖ Test user created: test@example.com / password123');
  
  // –¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
  const testListId = new ObjectId();
  db.todolists.insertOne({
    _id: testListId,
    ownerId: testUserId,
    title: 'My First Todo List',
    imageUrl: null,
    createdAt: new Date(),
    updatedAt: new Date()
  });
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
  db.tasks.insertMany([
    {
      _id: new ObjectId(),
      listId: testListId,
      title: 'Learn NestJS',
      description: 'Study NestJS framework with MongoDB',
      status: 'completed',
      order: 1,
      deadline: null,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      _id: new ObjectId(),
      listId: testListId,
      title: 'Implement Authentication',
      description: 'JWT authentication with bcrypt',
      status: 'completed',
      order: 2,
      deadline: null,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      _id: new ObjectId(),
      listId: testListId,
      title: 'Add Drag & Drop',
      description: 'Implement task reordering functionality',
      status: 'active',
      order: 3,
      deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
      createdAt: new Date(),
      updatedAt: new Date()
    }
  ]);
  
  print('‚úÖ Sample todo list and tasks created');
}

print('============================================');
print('üéâ TodoList API Database initialized successfully!');
print('üìä Collections created:');
print('  - users (with unique email index)');
print('  - todolists (with owner index)');
print('  - tasks (with order indexes)'); 
print('  - refresh_tokens (with TTL index)');
print('============================================');