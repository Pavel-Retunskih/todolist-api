// Database Seeding Script for Development
// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥–Ω—è—Ç–∏—è MongoDB –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

const { MongoClient, ObjectId } = require('mongodb');

const MONGODB_URI = process.env.DATABASE_URL || 'mongodb://root:password@localhost:27017/todolist-api?authSource=admin';
const DB_NAME = 'todolist-api';

async function seedDatabase() {
  console.log('üå± Starting database seeding...');
  
  const client = new MongoClient(MONGODB_URI);
  
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    await client.connect();
    console.log('‚úÖ Connected to MongoDB');
    
    const db = client.db(DB_NAME);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    const usersCount = await db.collection('users').countDocuments();
    
    if (usersCount > 0) {
      console.log('üîç Database already contains data, skipping seeding');
      return;
    }
    
    console.log('üìù Inserting seed data...');
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–∞—Ä–æ–ª—å: password123)
    const testUserId = new ObjectId();
    await db.collection('users').insertOne({
      _id: testUserId,
      email: 'test@example.com',
      passwordHash: '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewgTAL/GyPg8b8DW', // password123
      createdAt: new Date(),
      updatedAt: new Date()
    });
    
    console.log('üë§ Test user created: test@example.com / password123');
    
    // –¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    const testListId = new ObjectId();
    await db.collection('todolists').insertOne({
      _id: testListId,
      ownerId: testUserId,
      title: 'My First Todo List',
      imageUrl: null,
      createdAt: new Date(),
      updatedAt: new Date()
    });
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    await db.collection('tasks').insertMany([
      {
        _id: new ObjectId(),
        listId: testListId,
        title: 'Learn NestJS',
        description: 'Study NestJS framework with MongoDB',
        status: 'completed',
        order: 1,
        deadline: null,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        _id: new ObjectId(),
        listId: testListId,
        title: 'Implement Authentication',
        description: 'JWT authentication with bcrypt',
        status: 'completed',
        order: 2,
        deadline: null,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        _id: new ObjectId(),
        listId: testListId,
        title: 'Add Drag & Drop',
        description: 'Implement task reordering functionality',
        status: 'active',
        order: 3,
        deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        _id: new ObjectId(),
        listId: testListId,
        title: 'Setup Docker',
        description: 'Configure Docker Compose for development',
        status: 'active',
        order: 4,
        deadline: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // —á–µ—Ä–µ–∑ 3 –¥–Ω—è
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ]);
    
    console.log('üìã Sample todo list and tasks created');
    console.log('üéâ Database seeding completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
    process.exit(1);
  } finally {
    await client.close();
    console.log('üîå Database connection closed');
  }
}

// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É–±–µ–∂–¥–µ–Ω–∏—è, —á—Ç–æ MongoDB –≥–æ—Ç–æ–≤–∞
setTimeout(seedDatabase, 2000);